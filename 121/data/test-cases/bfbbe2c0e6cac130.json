{"uid":"bfbbe2c0e6cac130","name":"test_lowest_price","fullName":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najniższej_cenie#test_lowest_price","historyId":"e5f3cb7abaf11aa394506b842c21c2a1","time":{"start":1746955297763,"stop":1746955323194,"duration":25431},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=136.0.7103.59)\nStacktrace:\n#0 0x562122e727fa <unknown>\n#1 0x562122916e90 <unknown>\n#2 0x56212296f6fc <unknown>\n#3 0x56212296d565 <unknown>\n#4 0x56212296ac02 <unknown>\n#5 0x56212296a300 <unknown>\n#6 0x56212295c97d <unknown>\n#7 0x56212298e242 <unknown>\n#8 0x56212295c2fa <unknown>\n#9 0x56212298e40e <unknown>\n#10 0x5621229b4135 <unknown>\n#11 0x56212298e013 <unknown>\n#12 0x56212295ab3b <unknown>\n#13 0x56212295b7a1 <unknown>\n#14 0x562122e37b9b <unknown>\n#15 0x562122e3ba8a <unknown>\n#16 0x562122e1f912 <unknown>\n#17 0x562122e3c604 <unknown>\n#18 0x562122e0474f <unknown>\n#19 0x562122e60678 <unknown>\n#20 0x562122e60856 <unknown>\n#21 0x562122e71666 <unknown>\n#22 0x7f3db9a9caa4 <unknown>\n#23 0x7f3db9b29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d23f675f0f6f4a197b40f58bd9c1b00\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najniższej cenie\")\n    def test_lowest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        lowest_price = Sorting(driver)\n        lowest_price.she_button_click()\n        lowest_price.new_button_click()\n        lowest_price.mobile_filters_button_click()\n        lowest_price.sorting_button_click()\n        lowest_price.lowest_button_click()\n        lowest_price.submit_button_click()\n>       lowest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najniższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc394d943b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x562122e71666 \\\\u003Cunknown>\\\\n#22 0x7f3db9a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f3db9b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=136.0.7103.59)\nE       Stacktrace:\nE       #0 0x562122e727fa <unknown>\nE       #1 0x562122916e90 <unknown>\nE       #2 0x56212296f6fc <unknown>\nE       #3 0x56212296d565 <unknown>\nE       #4 0x56212296ac02 <unknown>\nE       #5 0x56212296a300 <unknown>\nE       #6 0x56212295c97d <unknown>\nE       #7 0x56212298e242 <unknown>\nE       #8 0x56212295c2fa <unknown>\nE       #9 0x56212298e40e <unknown>\nE       #10 0x5621229b4135 <unknown>\nE       #11 0x56212298e013 <unknown>\nE       #12 0x56212295ab3b <unknown>\nE       #13 0x56212295b7a1 <unknown>\nE       #14 0x562122e37b9b <unknown>\nE       #15 0x562122e3ba8a <unknown>\nE       #16 0x562122e1f912 <unknown>\nE       #17 0x562122e3c604 <unknown>\nE       #18 0x562122e0474f <unknown>\nE       #19 0x562122e60678 <unknown>\nE       #20 0x562122e60856 <unknown>\nE       #21 0x562122e71666 <unknown>\nE       #22 0x7f3db9a9caa4 <unknown>\nE       #23 0x7f3db9b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1746955297441,"stop":1746955297762,"duration":321},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=136.0.7103.59)\nStacktrace:\n#0 0x562122e727fa <unknown>\n#1 0x562122916e90 <unknown>\n#2 0x56212296f6fc <unknown>\n#3 0x56212296d565 <unknown>\n#4 0x56212296ac02 <unknown>\n#5 0x56212296a300 <unknown>\n#6 0x56212295c97d <unknown>\n#7 0x56212298e242 <unknown>\n#8 0x56212295c2fa <unknown>\n#9 0x56212298e40e <unknown>\n#10 0x5621229b4135 <unknown>\n#11 0x56212298e013 <unknown>\n#12 0x56212295ab3b <unknown>\n#13 0x56212295b7a1 <unknown>\n#14 0x562122e37b9b <unknown>\n#15 0x562122e3ba8a <unknown>\n#16 0x562122e1f912 <unknown>\n#17 0x562122e3c604 <unknown>\n#18 0x562122e0474f <unknown>\n#19 0x562122e60678 <unknown>\n#20 0x562122e60856 <unknown>\n#21 0x562122e71666 <unknown>\n#22 0x7f3db9a9caa4 <unknown>\n#23 0x7f3db9b29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d23f675f0f6f4a197b40f58bd9c1b00\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najniższej cenie\")\n    def test_lowest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        lowest_price = Sorting(driver)\n        lowest_price.she_button_click()\n        lowest_price.new_button_click()\n        lowest_price.mobile_filters_button_click()\n        lowest_price.sorting_button_click()\n        lowest_price.lowest_button_click()\n        lowest_price.submit_button_click()\n>       lowest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najniższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc394d943b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x562122e71666 \\\\u003Cunknown>\\\\n#22 0x7f3db9a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f3db9b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=136.0.7103.59)\nE       Stacktrace:\nE       #0 0x562122e727fa <unknown>\nE       #1 0x562122916e90 <unknown>\nE       #2 0x56212296f6fc <unknown>\nE       #3 0x56212296d565 <unknown>\nE       #4 0x56212296ac02 <unknown>\nE       #5 0x56212296a300 <unknown>\nE       #6 0x56212295c97d <unknown>\nE       #7 0x56212298e242 <unknown>\nE       #8 0x56212295c2fa <unknown>\nE       #9 0x56212298e40e <unknown>\nE       #10 0x5621229b4135 <unknown>\nE       #11 0x56212298e013 <unknown>\nE       #12 0x56212295ab3b <unknown>\nE       #13 0x56212295b7a1 <unknown>\nE       #14 0x562122e37b9b <unknown>\nE       #15 0x562122e3ba8a <unknown>\nE       #16 0x562122e1f912 <unknown>\nE       #17 0x562122e3c604 <unknown>\nE       #18 0x562122e0474f <unknown>\nE       #19 0x562122e60678 <unknown>\nE       #20 0x562122e60856 <unknown>\nE       #21 0x562122e71666 <unknown>\nE       #22 0x7f3db9a9caa4 <unknown>\nE       #23 0x7f3db9b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"de6457c6a46622ed","name":"stdout","source":"de6457c6a46622ed.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1746955323223,"stop":1746955323297,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Sortowanie"},{"name":"story","value":"Sortowanie po najniższej cenie"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile"},{"name":"suite","value":"test_mobile_sortowanie_po_najniższej_cenie"},{"name":"host","value":"fv-az2029-263"},{"name":"thread","value":"3292-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najniższej_cenie"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":8,"unknown":0,"total":12},"items":[{"uid":"9fb2c007a9ab9781","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/120//#testresult/9fb2c007a9ab9781","status":"passed","time":{"start":1746868891419,"stop":1746868919770,"duration":28351}},{"uid":"8a8545b62ccd3b","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/119//#testresult/8a8545b62ccd3b","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=136.0.7103.59)\nStacktrace:\n#0 0x55a3c2b717fa <unknown>\n#1 0x55a3c2615e90 <unknown>\n#2 0x55a3c266e6fc <unknown>\n#3 0x55a3c266c565 <unknown>\n#4 0x55a3c2669c02 <unknown>\n#5 0x55a3c2669300 <unknown>\n#6 0x55a3c265b97d <unknown>\n#7 0x55a3c268d242 <unknown>\n#8 0x55a3c265b2fa <unknown>\n#9 0x55a3c268d40e <unknown>\n#10 0x55a3c26b3135 <unknown>\n#11 0x55a3c268d013 <unknown>\n#12 0x55a3c2659b3b <unknown>\n#13 0x55a3c265a7a1 <unknown>\n#14 0x55a3c2b36b9b <unknown>\n#15 0x55a3c2b3aa8a <unknown>\n#16 0x55a3c2b1e912 <unknown>\n#17 0x55a3c2b3b604 <unknown>\n#18 0x55a3c2b0374f <unknown>\n#19 0x55a3c2b5f678 <unknown>\n#20 0x55a3c2b5f856 <unknown>\n#21 0x55a3c2b70666 <unknown>\n#22 0x7fe29649caa4 <unknown>\n#23 0x7fe296529c3c <unknown>","time":{"start":1746782665422,"stop":1746782691079,"duration":25657}},{"uid":"61d05d66a428a5af","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/118//#testresult/61d05d66a428a5af","status":"passed","time":{"start":1746696246115,"stop":1746696273584,"duration":27469}},{"uid":"3c7cc3e0df5f3d68","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/117//#testresult/3c7cc3e0df5f3d68","status":"passed","time":{"start":1746609925375,"stop":1746609953087,"duration":27712}},{"uid":"c840b6b3e58ef0a0","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/116//#testresult/c840b6b3e58ef0a0","status":"passed","time":{"start":1746523576764,"stop":1746523602834,"duration":26070}},{"uid":"fcf17a2a248d003d","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/115//#testresult/fcf17a2a248d003d","status":"passed","time":{"start":1746463263686,"stop":1746463290868,"duration":27182}},{"uid":"70de4debe69a4aef","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/114//#testresult/70de4debe69a4aef","status":"passed","time":{"start":1746454063503,"stop":1746454091092,"duration":27589}},{"uid":"ea0057379c39b97d","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/113//#testresult/ea0057379c39b97d","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x5589c942275a <unknown>\n#1 0x5589c8ed54b0 <unknown>\n#2 0x5589c8f2d7dc <unknown>\n#3 0x5589c8f2b645 <unknown>\n#4 0x5589c8f28ce2 <unknown>\n#5 0x5589c8f283e0 <unknown>\n#6 0x5589c8f1a9ed <unknown>\n#7 0x5589c8f4c592 <unknown>\n#8 0x5589c8f1a36a <unknown>\n#9 0x5589c8f4c75e <unknown>\n#10 0x5589c8f725e0 <unknown>\n#11 0x5589c8f4c363 <unknown>\n#12 0x5589c8f18d63 <unknown>\n#13 0x5589c8f199c1 <unknown>\n#14 0x5589c93e7a6b <unknown>\n#15 0x5589c93eb951 <unknown>\n#16 0x5589c93cfb62 <unknown>\n#17 0x5589c93ec4c4 <unknown>\n#18 0x5589c93b413f <unknown>\n#19 0x5589c94106f8 <unknown>\n#20 0x5589c94108d6 <unknown>\n#21 0x5589c94215a6 <unknown>\n#22 0x7fd33ee9caa4 <unknown>\n#23 0x7fd33ef29c3c <unknown>","time":{"start":1746453325418,"stop":1746453350631,"duration":25213}},{"uid":"e3fc78e203a40416","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/112//#testresult/e3fc78e203a40416","status":"passed","time":{"start":1746437088159,"stop":1746437115569,"duration":27410}},{"uid":"7422febba9534afb","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/111//#testresult/7422febba9534afb","status":"passed","time":{"start":1746350556618,"stop":1746350582601,"duration":25983}},{"uid":"df3636185d36fef7","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/110//#testresult/df3636185d36fef7","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55adda87a75a <unknown>\n#1 0x55adda32d4b0 <unknown>\n#2 0x55adda3857dc <unknown>\n#3 0x55adda383645 <unknown>\n#4 0x55adda380ce2 <unknown>\n#5 0x55adda3803e0 <unknown>\n#6 0x55adda3729ed <unknown>\n#7 0x55adda3a4592 <unknown>\n#8 0x55adda37236a <unknown>\n#9 0x55adda3a475e <unknown>\n#10 0x55adda3ca5e0 <unknown>\n#11 0x55adda3a4363 <unknown>\n#12 0x55adda370d63 <unknown>\n#13 0x55adda3719c1 <unknown>\n#14 0x55adda83fa6b <unknown>\n#15 0x55adda843951 <unknown>\n#16 0x55adda827b62 <unknown>\n#17 0x55adda8444c4 <unknown>\n#18 0x55adda80c13f <unknown>\n#19 0x55adda8686f8 <unknown>\n#20 0x55adda8688d6 <unknown>\n#21 0x55adda8795a6 <unknown>\n#22 0x7f39d469caa4 <unknown>\n#23 0x7f39d4729c3c <unknown>","time":{"start":1746265824365,"stop":1746265849548,"duration":25183}}]},"tags":["regression"]},"source":"bfbbe2c0e6cac130.json","parameterValues":[]}