{"uid":"23175b1aeb1dce66","name":"test_lowest_price","fullName":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najniższej_cenie#test_lowest_price","historyId":"e5f3cb7abaf11aa394506b842c21c2a1","time":{"start":1746263321780,"stop":1746263348279,"duration":26499},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x560d80d9f75a <unknown>\n#1 0x560d808524b0 <unknown>\n#2 0x560d808aa7dc <unknown>\n#3 0x560d808a8645 <unknown>\n#4 0x560d808a5ce2 <unknown>\n#5 0x560d808a53e0 <unknown>\n#6 0x560d808979ed <unknown>\n#7 0x560d808c9592 <unknown>\n#8 0x560d8089736a <unknown>\n#9 0x560d808c975e <unknown>\n#10 0x560d808ef5e0 <unknown>\n#11 0x560d808c9363 <unknown>\n#12 0x560d80895d63 <unknown>\n#13 0x560d808969c1 <unknown>\n#14 0x560d80d64a6b <unknown>\n#15 0x560d80d68951 <unknown>\n#16 0x560d80d4cb62 <unknown>\n#17 0x560d80d694c4 <unknown>\n#18 0x560d80d3113f <unknown>\n#19 0x560d80d8d6f8 <unknown>\n#20 0x560d80d8d8d6 <unknown>\n#21 0x560d80d9e5a6 <unknown>\n#22 0x7f0fcba9caa4 <unknown>\n#23 0x7f0fcbb29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"42df873f90c6a2cad732886ac519bc72\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najniższej cenie\")\n    def test_lowest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        lowest_price = Sorting(driver)\n        lowest_price.she_button_click()\n        lowest_price.new_button_click()\n        lowest_price.mobile_filters_button_click()\n        lowest_price.sorting_button_click()\n        lowest_price.lowest_button_click()\n        lowest_price.submit_button_click()\n>       lowest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najniższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fca59cbd010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x560d80d9e5a6 \\\\u003Cunknown>\\\\n#22 0x7f0fcba9caa4 \\\\u003Cunknown>\\\\n#23 0x7f0fcbb29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x560d80d9f75a <unknown>\nE       #1 0x560d808524b0 <unknown>\nE       #2 0x560d808aa7dc <unknown>\nE       #3 0x560d808a8645 <unknown>\nE       #4 0x560d808a5ce2 <unknown>\nE       #5 0x560d808a53e0 <unknown>\nE       #6 0x560d808979ed <unknown>\nE       #7 0x560d808c9592 <unknown>\nE       #8 0x560d8089736a <unknown>\nE       #9 0x560d808c975e <unknown>\nE       #10 0x560d808ef5e0 <unknown>\nE       #11 0x560d808c9363 <unknown>\nE       #12 0x560d80895d63 <unknown>\nE       #13 0x560d808969c1 <unknown>\nE       #14 0x560d80d64a6b <unknown>\nE       #15 0x560d80d68951 <unknown>\nE       #16 0x560d80d4cb62 <unknown>\nE       #17 0x560d80d694c4 <unknown>\nE       #18 0x560d80d3113f <unknown>\nE       #19 0x560d80d8d6f8 <unknown>\nE       #20 0x560d80d8d8d6 <unknown>\nE       #21 0x560d80d9e5a6 <unknown>\nE       #22 0x7f0fcba9caa4 <unknown>\nE       #23 0x7f0fcbb29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1746263321470,"stop":1746263321779,"duration":309},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x560d80d9f75a <unknown>\n#1 0x560d808524b0 <unknown>\n#2 0x560d808aa7dc <unknown>\n#3 0x560d808a8645 <unknown>\n#4 0x560d808a5ce2 <unknown>\n#5 0x560d808a53e0 <unknown>\n#6 0x560d808979ed <unknown>\n#7 0x560d808c9592 <unknown>\n#8 0x560d8089736a <unknown>\n#9 0x560d808c975e <unknown>\n#10 0x560d808ef5e0 <unknown>\n#11 0x560d808c9363 <unknown>\n#12 0x560d80895d63 <unknown>\n#13 0x560d808969c1 <unknown>\n#14 0x560d80d64a6b <unknown>\n#15 0x560d80d68951 <unknown>\n#16 0x560d80d4cb62 <unknown>\n#17 0x560d80d694c4 <unknown>\n#18 0x560d80d3113f <unknown>\n#19 0x560d80d8d6f8 <unknown>\n#20 0x560d80d8d8d6 <unknown>\n#21 0x560d80d9e5a6 <unknown>\n#22 0x7f0fcba9caa4 <unknown>\n#23 0x7f0fcbb29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"42df873f90c6a2cad732886ac519bc72\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najniższej cenie\")\n    def test_lowest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        lowest_price = Sorting(driver)\n        lowest_price.she_button_click()\n        lowest_price.new_button_click()\n        lowest_price.mobile_filters_button_click()\n        lowest_price.sorting_button_click()\n        lowest_price.lowest_button_click()\n        lowest_price.submit_button_click()\n>       lowest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najniższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fca59cbd010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x560d80d9e5a6 \\\\u003Cunknown>\\\\n#22 0x7f0fcba9caa4 \\\\u003Cunknown>\\\\n#23 0x7f0fcbb29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x560d80d9f75a <unknown>\nE       #1 0x560d808524b0 <unknown>\nE       #2 0x560d808aa7dc <unknown>\nE       #3 0x560d808a8645 <unknown>\nE       #4 0x560d808a5ce2 <unknown>\nE       #5 0x560d808a53e0 <unknown>\nE       #6 0x560d808979ed <unknown>\nE       #7 0x560d808c9592 <unknown>\nE       #8 0x560d8089736a <unknown>\nE       #9 0x560d808c975e <unknown>\nE       #10 0x560d808ef5e0 <unknown>\nE       #11 0x560d808c9363 <unknown>\nE       #12 0x560d80895d63 <unknown>\nE       #13 0x560d808969c1 <unknown>\nE       #14 0x560d80d64a6b <unknown>\nE       #15 0x560d80d68951 <unknown>\nE       #16 0x560d80d4cb62 <unknown>\nE       #17 0x560d80d694c4 <unknown>\nE       #18 0x560d80d3113f <unknown>\nE       #19 0x560d80d8d6f8 <unknown>\nE       #20 0x560d80d8d8d6 <unknown>\nE       #21 0x560d80d9e5a6 <unknown>\nE       #22 0x7f0fcba9caa4 <unknown>\nE       #23 0x7f0fcbb29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"38b1ae39f6f986","name":"stdout","source":"38b1ae39f6f986.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1746263348307,"stop":1746263348381,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Sortowanie"},{"name":"story","value":"Sortowanie po najniższej cenie"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile"},{"name":"suite","value":"test_mobile_sortowanie_po_najniższej_cenie"},{"name":"host","value":"fv-az1947-565"},{"name":"thread","value":"3233-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najniższej_cenie"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["regression"]},"source":"23175b1aeb1dce66.json","parameterValues":[]}