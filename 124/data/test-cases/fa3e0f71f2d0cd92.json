{"uid":"fa3e0f71f2d0cd92","name":"test_highest_price","fullName":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najwyższej_cenie#test_highest_price","historyId":"9e1c18267424a039ead0b1c083b36ca7","time":{"start":1747214697318,"stop":1747214723359,"duration":26041},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=136.0.7103.59)\nStacktrace:\n#0 0x55dff557b7fa <unknown>\n#1 0x55dff501fe90 <unknown>\n#2 0x55dff50786fc <unknown>\n#3 0x55dff5076565 <unknown>\n#4 0x55dff5073c02 <unknown>\n#5 0x55dff5073300 <unknown>\n#6 0x55dff506597d <unknown>\n#7 0x55dff5097242 <unknown>\n#8 0x55dff50652fa <unknown>\n#9 0x55dff509740e <unknown>\n#10 0x55dff50bd135 <unknown>\n#11 0x55dff5097013 <unknown>\n#12 0x55dff5063b3b <unknown>\n#13 0x55dff50647a1 <unknown>\n#14 0x55dff5540b9b <unknown>\n#15 0x55dff5544a8a <unknown>\n#16 0x55dff5528912 <unknown>\n#17 0x55dff5545604 <unknown>\n#18 0x55dff550d74f <unknown>\n#19 0x55dff5569678 <unknown>\n#20 0x55dff5569856 <unknown>\n#21 0x55dff557a666 <unknown>\n#22 0x7fc59329caa4 <unknown>\n#23 0x7fc593329c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4fdc9f691de351e1de66facdd42fa9b8\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najwyższej cenie\")\n    def test_highest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        highest_price = Sorting(driver)\n        highest_price.she_button_click()\n        highest_price.new_button_click()\n        highest_price.mobile_filters_button_click()\n        highest_price.sorting_button_click()\n        highest_price.highest_button_click()\n        highest_price.submit_button_click()\n>       highest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najwyższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f055bf659d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55dff557a666 \\\\u003Cunknown>\\\\n#22 0x7fc59329caa4 \\\\u003Cunknown>\\\\n#23 0x7fc593329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=136.0.7103.59)\nE       Stacktrace:\nE       #0 0x55dff557b7fa <unknown>\nE       #1 0x55dff501fe90 <unknown>\nE       #2 0x55dff50786fc <unknown>\nE       #3 0x55dff5076565 <unknown>\nE       #4 0x55dff5073c02 <unknown>\nE       #5 0x55dff5073300 <unknown>\nE       #6 0x55dff506597d <unknown>\nE       #7 0x55dff5097242 <unknown>\nE       #8 0x55dff50652fa <unknown>\nE       #9 0x55dff509740e <unknown>\nE       #10 0x55dff50bd135 <unknown>\nE       #11 0x55dff5097013 <unknown>\nE       #12 0x55dff5063b3b <unknown>\nE       #13 0x55dff50647a1 <unknown>\nE       #14 0x55dff5540b9b <unknown>\nE       #15 0x55dff5544a8a <unknown>\nE       #16 0x55dff5528912 <unknown>\nE       #17 0x55dff5545604 <unknown>\nE       #18 0x55dff550d74f <unknown>\nE       #19 0x55dff5569678 <unknown>\nE       #20 0x55dff5569856 <unknown>\nE       #21 0x55dff557a666 <unknown>\nE       #22 0x7fc59329caa4 <unknown>\nE       #23 0x7fc593329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1747214696977,"stop":1747214697318,"duration":341},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=136.0.7103.59)\nStacktrace:\n#0 0x55dff557b7fa <unknown>\n#1 0x55dff501fe90 <unknown>\n#2 0x55dff50786fc <unknown>\n#3 0x55dff5076565 <unknown>\n#4 0x55dff5073c02 <unknown>\n#5 0x55dff5073300 <unknown>\n#6 0x55dff506597d <unknown>\n#7 0x55dff5097242 <unknown>\n#8 0x55dff50652fa <unknown>\n#9 0x55dff509740e <unknown>\n#10 0x55dff50bd135 <unknown>\n#11 0x55dff5097013 <unknown>\n#12 0x55dff5063b3b <unknown>\n#13 0x55dff50647a1 <unknown>\n#14 0x55dff5540b9b <unknown>\n#15 0x55dff5544a8a <unknown>\n#16 0x55dff5528912 <unknown>\n#17 0x55dff5545604 <unknown>\n#18 0x55dff550d74f <unknown>\n#19 0x55dff5569678 <unknown>\n#20 0x55dff5569856 <unknown>\n#21 0x55dff557a666 <unknown>\n#22 0x7fc59329caa4 <unknown>\n#23 0x7fc593329c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4fdc9f691de351e1de66facdd42fa9b8\")>\n\n    @pytest.mark.regression\n    @allure.feature(\"Sortowanie\")\n    @allure.story(\"Sortowanie po najwyższej cenie\")\n    def test_highest_price(driver):\n        website = Login(driver)\n        website.open_website()\n        website.accept_cookies()\n        highest_price = Sorting(driver)\n        highest_price.she_button_click()\n        highest_price.new_button_click()\n        highest_price.mobile_filters_button_click()\n        highest_price.sorting_button_click()\n        highest_price.highest_button_click()\n        highest_price.submit_button_click()\n>       highest_price.view_products_click()\n\ntesty_sortowania/mobile/test_mobile_sortowanie_po_najwyższej_cenie.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../services/sortowanie/sortowanie.py:109: in view_products_click\n    self.driver.find_element(*self.view_products).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f055bf659d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55dff557a666 \\\\u003Cunknown>\\\\n#22 0x7fc59329caa4 \\\\u003Cunknown>\\\\n#23 0x7fc593329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\nE         (Session info: chrome=136.0.7103.59)\nE       Stacktrace:\nE       #0 0x55dff557b7fa <unknown>\nE       #1 0x55dff501fe90 <unknown>\nE       #2 0x55dff50786fc <unknown>\nE       #3 0x55dff5076565 <unknown>\nE       #4 0x55dff5073c02 <unknown>\nE       #5 0x55dff5073300 <unknown>\nE       #6 0x55dff506597d <unknown>\nE       #7 0x55dff5097242 <unknown>\nE       #8 0x55dff50652fa <unknown>\nE       #9 0x55dff509740e <unknown>\nE       #10 0x55dff50bd135 <unknown>\nE       #11 0x55dff5097013 <unknown>\nE       #12 0x55dff5063b3b <unknown>\nE       #13 0x55dff50647a1 <unknown>\nE       #14 0x55dff5540b9b <unknown>\nE       #15 0x55dff5544a8a <unknown>\nE       #16 0x55dff5528912 <unknown>\nE       #17 0x55dff5545604 <unknown>\nE       #18 0x55dff550d74f <unknown>\nE       #19 0x55dff5569678 <unknown>\nE       #20 0x55dff5569856 <unknown>\nE       #21 0x55dff557a666 <unknown>\nE       #22 0x7fc59329caa4 <unknown>\nE       #23 0x7fc593329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"75ff9112a339be71","name":"stdout","source":"75ff9112a339be71.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1747214723384,"stop":1747214723463,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Sortowanie"},{"name":"story","value":"Sortowanie po najwyższej cenie"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile"},{"name":"suite","value":"test_mobile_sortowanie_po_najwyższej_cenie"},{"name":"host","value":"fv-az2210-273"},{"name":"thread","value":"3278-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"projekt_zaliczeniowy.tests.testy_sortowania.mobile.test_mobile_sortowanie_po_najwyższej_cenie"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":12,"unknown":0,"total":15},"items":[{"uid":"d97d32aad53cc39d","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/123//#testresult/d97d32aad53cc39d","status":"passed","time":{"start":1747128335853,"stop":1747128364871,"duration":29018}},{"uid":"733dce38f1cb370f","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/122//#testresult/733dce38f1cb370f","status":"passed","time":{"start":1747041948913,"stop":1747041975266,"duration":26353}},{"uid":"2de8dfc80e211f47","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/121//#testresult/2de8dfc80e211f47","status":"broken","statusDetails":"TypeError: object of type 'NoneType' has no len()","time":{"start":1746955323616,"stop":1746955423229,"duration":99613}},{"uid":"9d4ac4c3b4286b9d","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/120//#testresult/9d4ac4c3b4286b9d","status":"passed","time":{"start":1746868920179,"stop":1746868948254,"duration":28075}},{"uid":"8c3bef4aba87aca3","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/119//#testresult/8c3bef4aba87aca3","status":"passed","time":{"start":1746782691505,"stop":1746782719100,"duration":27595}},{"uid":"cc05da78e0f35b79","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/118//#testresult/cc05da78e0f35b79","status":"passed","time":{"start":1746696273994,"stop":1746696302477,"duration":28483}},{"uid":"c0032c22776f459a","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/117//#testresult/c0032c22776f459a","status":"passed","time":{"start":1746609953490,"stop":1746609981980,"duration":28490}},{"uid":"ac3847163a1d3b83","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/116//#testresult/ac3847163a1d3b83","status":"passed","time":{"start":1746523603241,"stop":1746523631253,"duration":28012}},{"uid":"70907ca8de322c3a","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/115//#testresult/70907ca8de322c3a","status":"passed","time":{"start":1746463291271,"stop":1746463320310,"duration":29039}},{"uid":"642a74343b2d8a7e","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/114//#testresult/642a74343b2d8a7e","status":"passed","time":{"start":1746454091487,"stop":1746454121117,"duration":29630}},{"uid":"3e2ece4f9e6d39b0","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/113//#testresult/3e2ece4f9e6d39b0","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btnPrimary btn--fluid Button__buttonContainerFontWeight__3oaib\" data-test=\"mobileFiltersSubmitButton\">...</button> is not clickable at point (250, 755). Other element would receive the click: <div class=\"Filters__filtersLoader__qVvBU\">...</div>\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x560422a1875a <unknown>\n#1 0x5604224cb4b0 <unknown>\n#2 0x5604225237dc <unknown>\n#3 0x560422521645 <unknown>\n#4 0x56042251ece2 <unknown>\n#5 0x56042251e3e0 <unknown>\n#6 0x5604225109ed <unknown>\n#7 0x560422542592 <unknown>\n#8 0x56042251036a <unknown>\n#9 0x56042254275e <unknown>\n#10 0x5604225685e0 <unknown>\n#11 0x560422542363 <unknown>\n#12 0x56042250ed63 <unknown>\n#13 0x56042250f9c1 <unknown>\n#14 0x5604229dda6b <unknown>\n#15 0x5604229e1951 <unknown>\n#16 0x5604229c5b62 <unknown>\n#17 0x5604229e24c4 <unknown>\n#18 0x5604229aa13f <unknown>\n#19 0x560422a066f8 <unknown>\n#20 0x560422a068d6 <unknown>\n#21 0x560422a175a6 <unknown>\n#22 0x7fdbc789caa4 <unknown>\n#23 0x7fdbc7929c3c <unknown>","time":{"start":1746453351051,"stop":1746453376265,"duration":25214}},{"uid":"f0d4d154a04b1161","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/112//#testresult/f0d4d154a04b1161","status":"passed","time":{"start":1746437115957,"stop":1746437143227,"duration":27270}},{"uid":"59e0e78d3ec96cb7","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/111//#testresult/59e0e78d3ec96cb7","status":"passed","time":{"start":1746350582997,"stop":1746350611077,"duration":28080}},{"uid":"ec12ed5afc106d","reportUrl":"https://aleksandraszczesna.github.io/answear_automation_tests/110//#testresult/ec12ed5afc106d","status":"passed","time":{"start":1746265849967,"stop":1746265876771,"duration":26804}}]},"tags":["regression"]},"source":"fa3e0f71f2d0cd92.json","parameterValues":[]}