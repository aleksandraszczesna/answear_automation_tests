# 📊 CI pipeline: uruchamia testy i publikuje raport Allure.
# 🔗 Raport: https://aleksandraszczesna.github.io/answear_automation_tests/
name: Run Automation tests

on:
  schedule:
    - cron: '0 9 * * *'  # Codziennie o 9:00 UTC (czyli 11:00 w Polsce latem)
  push:                  # Workflow uruchamiany na każde wypchnięcie zmian do repozytorium
  pull_request:          # Workflow uruchamiany na każde otwarcie lub aktualizację Pull Requesta
  workflow_dispatch:     # Workflow można uruchomić ręcznie z interfejsu GitHub GUI
    inputs:
      marker:
        description: 'Choose pytest marker to run'
        required: true
        default: regression  #Domyślny marker
        type: choice
        options: # Markery, które możemy wybrac
          - regression
          - api
          - smoke

jobs:
  test:
    runs-on: ubuntu-latest  # Określamy, że workflow będzie uruchomiony na maszynie z systemem Ubuntu

    steps:
      # Domyślny marker w przypadku 'schedule' i 'push' (regression)
      - name: Set default marker for schedule or push
        run: |
          if [[ -z "${{ github.event.inputs.marker }}" ]]; then
            echo "No marker input provided. Using default: regression"
            echo "marker=regression" >> $GITHUB_ENV
          else
            echo "Using input marker: ${{ github.event.inputs.marker }}"
            echo "marker=${{ github.event.inputs.marker }}" >> $GITHUB_ENV
          fi

      # Sprawdzenie wersji Chrome, aby upewnić się, że jest zainstalowany
      - name: Check Chrome version
        run: google-chrome --version

      # Sprawdzenie wersji chromedriver, żeby mieć pewność, że jest kompatybilny z wersją Chrome
      - name: Check chromedriver version
        run: chromedriver --version

      # Checkout repozytorium, pobranie najnowszej wersji kodu z repozytorium
      - name: Checkout repo
        uses: actions/checkout@v3

      # Ustawienie Pythona: instalacja odpowiedniej wersji Pythona (tutaj 3.11)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      # Instalowanie zależności: aktualizacja pip oraz instalacja zależności z pliku requirements.txt
      # Zainstalowanie Playwright (biblioteka do testów E2E)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Aktualizacja pip
          pip install -r requirements.txt    # Instalacja zależności
          playwright install                  # Instalacja Playwright i przeglądarek

      # Modyfikacja pliku konfiguracyjnego 'config.yaml', aby uruchomić testy w trybie headless (bez GUI)
      - name: Run tests headless
        run: |
          sed -i 's/headless: false/headless: true/' projekt_zaliczeniowy/configuration/config.yaml  # Zmiana na headless

      # Pokazanie zmodyfikowanego pliku 'config.yaml', żeby sprawdzić, czy zmiana została zastosowana poprawnie
      - name: Pokaż zmodyfikowany config.yaml
        run: |
          cat projekt_zaliczeniowy/configuration/config.yaml  # Wyświetlenie zawartości pliku konfiguracyjnego

      # Uruchomienie testów z Allure, zapis wyników do katalogu 'allure-results'
      - name: Run tests with Allure
        working-directory: projekt_zaliczeniowy/tests/  # Określamy katalog roboczy z testami
        run: pytest -m ${{ env.marker }} --alluredir=allure-results  # Uruchomienie pytest i zapisanie wyników do katalogu allure-results

      # Załadowanie wyników testów z folderu allure-results
      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Generowanie raportu Allure z wyników testów i publikowanie raportu
      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: projekt_zaliczeniowy/tests/allure-results  # Folder z wynikami testów

      # Wysłanie wygenerowanego raportu jako artefakt, który będzie dostępny po zakończeniu workflow
      - name: Upload Allure report
        uses: actions/upload-artifact@v4  # Akcja do uploadu artefaktów
        if: always()
        with:
          name: allure-report  # Nazwa artefaktu
          path: allure-history  # Ścieżka do folderu z raportem Allure

      # Publikacja raportu na GitHub Pages
      - name: Publish report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Autoryzacja z tokenem GitHub
          publish_branch: gh-pages  # Gałąź, na której będzie opublikowany raport
          publish_dir: allure-history  # Katalog, który zostanie opublikowany na GitHub Pages

      # Link do najnowszego raportu
      - name: Print link to Allure report
        if: always()
        run: |
          echo "🔗 Allure report:"
          echo "https://aleksandraszczesna.github.io/answear_automation_tests/"